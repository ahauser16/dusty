"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PromiseDefaultApi = void 0;
var ObservableAPI_1 = require("./ObservableAPI");
var PromiseDefaultApi = (function () {
    function PromiseDefaultApi(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_1.ObservableDefaultApi(configuration, requestFactory, responseProcessor);
    }
    PromiseDefaultApi.prototype.geocodingReverseSearch = function (lat, lng, within_country, options) {
        var result = this.api.geocodingReverseSearch(lat, lng, within_country, options);
        return result.toPromise();
    };
    PromiseDefaultApi.prototype.geocodingSearch = function (query, focus_lat, focus_lng, within_country, options) {
        var result = this.api.geocodingSearch(query, focus_lat, focus_lng, within_country, options);
        return result.toPromise();
    };
    PromiseDefaultApi.prototype.mapInfo = function (options) {
        var result = this.api.mapInfo(options);
        return result.toPromise();
    };
    PromiseDefaultApi.prototype.routes = function (RequestRoutes, options) {
        var result = this.api.routes(RequestRoutes, options);
        return result.toPromise();
    };
    PromiseDefaultApi.prototype.supportedLocations = function (RequestSupportedLocations, options) {
        var result = this.api.supportedLocations(RequestSupportedLocations, options);
        return result.toPromise();
    };
    PromiseDefaultApi.prototype.timeFilter = function (RequestTimeFilter, options) {
        var result = this.api.timeFilter(RequestTimeFilter, options);
        return result.toPromise();
    };
    PromiseDefaultApi.prototype.timeFilterFast = function (RequestTimeFilterFast, options) {
        var result = this.api.timeFilterFast(RequestTimeFilterFast, options);
        return result.toPromise();
    };
    PromiseDefaultApi.prototype.timeFilterPostcodeDistricts = function (RequestTimeFilterPostcodeDistricts, options) {
        var result = this.api.timeFilterPostcodeDistricts(RequestTimeFilterPostcodeDistricts, options);
        return result.toPromise();
    };
    PromiseDefaultApi.prototype.timeFilterPostcodeSectors = function (RequestTimeFilterPostcodeSectors, options) {
        var result = this.api.timeFilterPostcodeSectors(RequestTimeFilterPostcodeSectors, options);
        return result.toPromise();
    };
    PromiseDefaultApi.prototype.timeFilterPostcodes = function (RequestTimeFilterPostcodes, options) {
        var result = this.api.timeFilterPostcodes(RequestTimeFilterPostcodes, options);
        return result.toPromise();
    };
    PromiseDefaultApi.prototype.timeMap = function (RequestTimeMap, options) {
        var result = this.api.timeMap(RequestTimeMap, options);
        return result.toPromise();
    };
    return PromiseDefaultApi;
}());
exports.PromiseDefaultApi = PromiseDefaultApi;
//# sourceMappingURL=PromiseAPI.js.map