import { Configuration } from '../configuration';
import { RequestRoutes } from '../models/RequestRoutes';
import { RequestSupportedLocations } from '../models/RequestSupportedLocations';
import { RequestTimeFilter } from '../models/RequestTimeFilter';
import { RequestTimeFilterFast } from '../models/RequestTimeFilterFast';
import { RequestTimeFilterPostcodeDistricts } from '../models/RequestTimeFilterPostcodeDistricts';
import { RequestTimeFilterPostcodeSectors } from '../models/RequestTimeFilterPostcodeSectors';
import { RequestTimeFilterPostcodes } from '../models/RequestTimeFilterPostcodes';
import { RequestTimeMap } from '../models/RequestTimeMap';
import { ResponseGeocoding } from '../models/ResponseGeocoding';
import { ResponseMapInfo } from '../models/ResponseMapInfo';
import { ResponseRoutes } from '../models/ResponseRoutes';
import { ResponseSupportedLocations } from '../models/ResponseSupportedLocations';
import { ResponseTimeFilter } from '../models/ResponseTimeFilter';
import { ResponseTimeFilterFast } from '../models/ResponseTimeFilterFast';
import { ResponseTimeFilterPostcodeDistricts } from '../models/ResponseTimeFilterPostcodeDistricts';
import { ResponseTimeFilterPostcodeSectors } from '../models/ResponseTimeFilterPostcodeSectors';
import { ResponseTimeFilterPostcodes } from '../models/ResponseTimeFilterPostcodes';
import { ResponseTimeMap } from '../models/ResponseTimeMap';
import { DefaultApiRequestFactory, DefaultApiResponseProcessor } from "../apis/DefaultApi";
export interface DefaultApiGeocodingReverseSearchRequest {
    lat: number;
    lng: number;
    within_country?: string;
}
export interface DefaultApiGeocodingSearchRequest {
    query: string;
    focus_lat?: number;
    focus_lng?: number;
    within_country?: string;
}
export interface DefaultApiMapInfoRequest {
}
export interface DefaultApiRoutesRequest {
    RequestRoutes: RequestRoutes;
}
export interface DefaultApiSupportedLocationsRequest {
    RequestSupportedLocations: RequestSupportedLocations;
}
export interface DefaultApiTimeFilterRequest {
    RequestTimeFilter: RequestTimeFilter;
}
export interface DefaultApiTimeFilterFastRequest {
    RequestTimeFilterFast: RequestTimeFilterFast;
}
export interface DefaultApiTimeFilterPostcodeDistrictsRequest {
    RequestTimeFilterPostcodeDistricts: RequestTimeFilterPostcodeDistricts;
}
export interface DefaultApiTimeFilterPostcodeSectorsRequest {
    RequestTimeFilterPostcodeSectors: RequestTimeFilterPostcodeSectors;
}
export interface DefaultApiTimeFilterPostcodesRequest {
    RequestTimeFilterPostcodes: RequestTimeFilterPostcodes;
}
export interface DefaultApiTimeMapRequest {
    RequestTimeMap: RequestTimeMap;
}
export declare class ObjectDefaultApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: DefaultApiRequestFactory, responseProcessor?: DefaultApiResponseProcessor);
    geocodingReverseSearch(param: DefaultApiGeocodingReverseSearchRequest, options?: Configuration): Promise<ResponseGeocoding>;
    geocodingSearch(param: DefaultApiGeocodingSearchRequest, options?: Configuration): Promise<ResponseGeocoding>;
    mapInfo(param: DefaultApiMapInfoRequest, options?: Configuration): Promise<ResponseMapInfo>;
    routes(param: DefaultApiRoutesRequest, options?: Configuration): Promise<ResponseRoutes>;
    supportedLocations(param: DefaultApiSupportedLocationsRequest, options?: Configuration): Promise<ResponseSupportedLocations>;
    timeFilter(param: DefaultApiTimeFilterRequest, options?: Configuration): Promise<ResponseTimeFilter>;
    timeFilterFast(param: DefaultApiTimeFilterFastRequest, options?: Configuration): Promise<ResponseTimeFilterFast>;
    timeFilterPostcodeDistricts(param: DefaultApiTimeFilterPostcodeDistrictsRequest, options?: Configuration): Promise<ResponseTimeFilterPostcodeDistricts>;
    timeFilterPostcodeSectors(param: DefaultApiTimeFilterPostcodeSectorsRequest, options?: Configuration): Promise<ResponseTimeFilterPostcodeSectors>;
    timeFilterPostcodes(param: DefaultApiTimeFilterPostcodesRequest, options?: Configuration): Promise<ResponseTimeFilterPostcodes>;
    timeMap(param: DefaultApiTimeMapRequest, options?: Configuration): Promise<ResponseTimeMap>;
}
