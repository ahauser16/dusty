"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultApiResponseProcessor = exports.DefaultApiRequestFactory = void 0;
var baseapi_1 = require("./baseapi");
var http_1 = require("../http/http");
var ObjectSerializer_1 = require("../models/ObjectSerializer");
var exception_1 = require("./exception");
var util_1 = require("../util");
var DefaultApiRequestFactory = (function (_super) {
    __extends(DefaultApiRequestFactory, _super);
    function DefaultApiRequestFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DefaultApiRequestFactory.prototype.geocodingReverseSearch = function (lat, lng, within_country, options) {
        return __awaiter(this, void 0, void 0, function () {
            var config, localVarPath, requestContext, authMethod;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        config = options || this.configuration;
                        if (lat === null || lat === undefined) {
                            throw new baseapi_1.RequiredError('Required parameter lat was null or undefined when calling geocodingReverseSearch.');
                        }
                        if (lng === null || lng === undefined) {
                            throw new baseapi_1.RequiredError('Required parameter lng was null or undefined when calling geocodingReverseSearch.');
                        }
                        localVarPath = '/v4/geocoding/reverse';
                        requestContext = config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (lat !== undefined) {
                            requestContext.setQueryParam("lat", ObjectSerializer_1.ObjectSerializer.serialize(lat, "number", "double"));
                        }
                        if (lng !== undefined) {
                            requestContext.setQueryParam("lng", ObjectSerializer_1.ObjectSerializer.serialize(lng, "number", "double"));
                        }
                        if (within_country !== undefined) {
                            requestContext.setQueryParam("within.country", ObjectSerializer_1.ObjectSerializer.serialize(within_country, "string", ""));
                        }
                        authMethod = null;
                        authMethod = config.authMethods["ApiKey"];
                        if (!authMethod) return [3, 2];
                        return [4, authMethod.applySecurityAuthentication(requestContext)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        authMethod = config.authMethods["ApplicationId"];
                        if (!authMethod) return [3, 4];
                        return [4, authMethod.applySecurityAuthentication(requestContext)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [2, requestContext];
                }
            });
        });
    };
    DefaultApiRequestFactory.prototype.geocodingSearch = function (query, focus_lat, focus_lng, within_country, options) {
        return __awaiter(this, void 0, void 0, function () {
            var config, localVarPath, requestContext, authMethod;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        config = options || this.configuration;
                        if (query === null || query === undefined) {
                            throw new baseapi_1.RequiredError('Required parameter query was null or undefined when calling geocodingSearch.');
                        }
                        localVarPath = '/v4/geocoding/search';
                        requestContext = config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        if (query !== undefined) {
                            requestContext.setQueryParam("query", ObjectSerializer_1.ObjectSerializer.serialize(query, "string", ""));
                        }
                        if (focus_lat !== undefined) {
                            requestContext.setQueryParam("focus.lat", ObjectSerializer_1.ObjectSerializer.serialize(focus_lat, "number", "double"));
                        }
                        if (focus_lng !== undefined) {
                            requestContext.setQueryParam("focus.lng", ObjectSerializer_1.ObjectSerializer.serialize(focus_lng, "number", "double"));
                        }
                        if (within_country !== undefined) {
                            requestContext.setQueryParam("within.country", ObjectSerializer_1.ObjectSerializer.serialize(within_country, "string", ""));
                        }
                        authMethod = null;
                        authMethod = config.authMethods["ApiKey"];
                        if (!authMethod) return [3, 2];
                        return [4, authMethod.applySecurityAuthentication(requestContext)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        authMethod = config.authMethods["ApplicationId"];
                        if (!authMethod) return [3, 4];
                        return [4, authMethod.applySecurityAuthentication(requestContext)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [2, requestContext];
                }
            });
        });
    };
    DefaultApiRequestFactory.prototype.mapInfo = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var config, localVarPath, requestContext, authMethod;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        config = options || this.configuration;
                        localVarPath = '/v4/map-info';
                        requestContext = config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        authMethod = null;
                        authMethod = config.authMethods["ApiKey"];
                        if (!authMethod) return [3, 2];
                        return [4, authMethod.applySecurityAuthentication(requestContext)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        authMethod = config.authMethods["ApplicationId"];
                        if (!authMethod) return [3, 4];
                        return [4, authMethod.applySecurityAuthentication(requestContext)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [2, requestContext];
                }
            });
        });
    };
    DefaultApiRequestFactory.prototype.routes = function (RequestRoutes, options) {
        return __awaiter(this, void 0, void 0, function () {
            var config, localVarPath, requestContext, contentType, serializedBody, authMethod;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        config = options || this.configuration;
                        if (RequestRoutes === null || RequestRoutes === undefined) {
                            throw new baseapi_1.RequiredError('Required parameter RequestRoutes was null or undefined when calling routes.');
                        }
                        localVarPath = '/v4/routes';
                        requestContext = config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(RequestRoutes, "RequestRoutes", ""), contentType);
                        requestContext.setBody(serializedBody);
                        authMethod = null;
                        authMethod = config.authMethods["ApiKey"];
                        if (!authMethod) return [3, 2];
                        return [4, authMethod.applySecurityAuthentication(requestContext)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        authMethod = config.authMethods["ApplicationId"];
                        if (!authMethod) return [3, 4];
                        return [4, authMethod.applySecurityAuthentication(requestContext)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [2, requestContext];
                }
            });
        });
    };
    DefaultApiRequestFactory.prototype.supportedLocations = function (RequestSupportedLocations, options) {
        return __awaiter(this, void 0, void 0, function () {
            var config, localVarPath, requestContext, contentType, serializedBody, authMethod;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        config = options || this.configuration;
                        if (RequestSupportedLocations === null || RequestSupportedLocations === undefined) {
                            throw new baseapi_1.RequiredError('Required parameter RequestSupportedLocations was null or undefined when calling supportedLocations.');
                        }
                        localVarPath = '/v4/supported-locations';
                        requestContext = config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(RequestSupportedLocations, "RequestSupportedLocations", ""), contentType);
                        requestContext.setBody(serializedBody);
                        authMethod = null;
                        authMethod = config.authMethods["ApiKey"];
                        if (!authMethod) return [3, 2];
                        return [4, authMethod.applySecurityAuthentication(requestContext)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        authMethod = config.authMethods["ApplicationId"];
                        if (!authMethod) return [3, 4];
                        return [4, authMethod.applySecurityAuthentication(requestContext)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [2, requestContext];
                }
            });
        });
    };
    DefaultApiRequestFactory.prototype.timeFilter = function (RequestTimeFilter, options) {
        return __awaiter(this, void 0, void 0, function () {
            var config, localVarPath, requestContext, contentType, serializedBody, authMethod;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        config = options || this.configuration;
                        if (RequestTimeFilter === null || RequestTimeFilter === undefined) {
                            throw new baseapi_1.RequiredError('Required parameter RequestTimeFilter was null or undefined when calling timeFilter.');
                        }
                        localVarPath = '/v4/time-filter';
                        requestContext = config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(RequestTimeFilter, "RequestTimeFilter", ""), contentType);
                        requestContext.setBody(serializedBody);
                        authMethod = null;
                        authMethod = config.authMethods["ApiKey"];
                        if (!authMethod) return [3, 2];
                        return [4, authMethod.applySecurityAuthentication(requestContext)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        authMethod = config.authMethods["ApplicationId"];
                        if (!authMethod) return [3, 4];
                        return [4, authMethod.applySecurityAuthentication(requestContext)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [2, requestContext];
                }
            });
        });
    };
    DefaultApiRequestFactory.prototype.timeFilterFast = function (RequestTimeFilterFast, options) {
        return __awaiter(this, void 0, void 0, function () {
            var config, localVarPath, requestContext, contentType, serializedBody, authMethod;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        config = options || this.configuration;
                        if (RequestTimeFilterFast === null || RequestTimeFilterFast === undefined) {
                            throw new baseapi_1.RequiredError('Required parameter RequestTimeFilterFast was null or undefined when calling timeFilterFast.');
                        }
                        localVarPath = '/v4/time-filter/fast';
                        requestContext = config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(RequestTimeFilterFast, "RequestTimeFilterFast", ""), contentType);
                        requestContext.setBody(serializedBody);
                        authMethod = null;
                        authMethod = config.authMethods["ApiKey"];
                        if (!authMethod) return [3, 2];
                        return [4, authMethod.applySecurityAuthentication(requestContext)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        authMethod = config.authMethods["ApplicationId"];
                        if (!authMethod) return [3, 4];
                        return [4, authMethod.applySecurityAuthentication(requestContext)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [2, requestContext];
                }
            });
        });
    };
    DefaultApiRequestFactory.prototype.timeFilterPostcodeDistricts = function (RequestTimeFilterPostcodeDistricts, options) {
        return __awaiter(this, void 0, void 0, function () {
            var config, localVarPath, requestContext, contentType, serializedBody, authMethod;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        config = options || this.configuration;
                        if (RequestTimeFilterPostcodeDistricts === null || RequestTimeFilterPostcodeDistricts === undefined) {
                            throw new baseapi_1.RequiredError('Required parameter RequestTimeFilterPostcodeDistricts was null or undefined when calling timeFilterPostcodeDistricts.');
                        }
                        localVarPath = '/v4/time-filter/postcode-districts';
                        requestContext = config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(RequestTimeFilterPostcodeDistricts, "RequestTimeFilterPostcodeDistricts", ""), contentType);
                        requestContext.setBody(serializedBody);
                        authMethod = null;
                        authMethod = config.authMethods["ApiKey"];
                        if (!authMethod) return [3, 2];
                        return [4, authMethod.applySecurityAuthentication(requestContext)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        authMethod = config.authMethods["ApplicationId"];
                        if (!authMethod) return [3, 4];
                        return [4, authMethod.applySecurityAuthentication(requestContext)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [2, requestContext];
                }
            });
        });
    };
    DefaultApiRequestFactory.prototype.timeFilterPostcodeSectors = function (RequestTimeFilterPostcodeSectors, options) {
        return __awaiter(this, void 0, void 0, function () {
            var config, localVarPath, requestContext, contentType, serializedBody, authMethod;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        config = options || this.configuration;
                        if (RequestTimeFilterPostcodeSectors === null || RequestTimeFilterPostcodeSectors === undefined) {
                            throw new baseapi_1.RequiredError('Required parameter RequestTimeFilterPostcodeSectors was null or undefined when calling timeFilterPostcodeSectors.');
                        }
                        localVarPath = '/v4/time-filter/postcode-sectors';
                        requestContext = config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(RequestTimeFilterPostcodeSectors, "RequestTimeFilterPostcodeSectors", ""), contentType);
                        requestContext.setBody(serializedBody);
                        authMethod = null;
                        authMethod = config.authMethods["ApiKey"];
                        if (!authMethod) return [3, 2];
                        return [4, authMethod.applySecurityAuthentication(requestContext)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        authMethod = config.authMethods["ApplicationId"];
                        if (!authMethod) return [3, 4];
                        return [4, authMethod.applySecurityAuthentication(requestContext)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [2, requestContext];
                }
            });
        });
    };
    DefaultApiRequestFactory.prototype.timeFilterPostcodes = function (RequestTimeFilterPostcodes, options) {
        return __awaiter(this, void 0, void 0, function () {
            var config, localVarPath, requestContext, contentType, serializedBody, authMethod;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        config = options || this.configuration;
                        if (RequestTimeFilterPostcodes === null || RequestTimeFilterPostcodes === undefined) {
                            throw new baseapi_1.RequiredError('Required parameter RequestTimeFilterPostcodes was null or undefined when calling timeFilterPostcodes.');
                        }
                        localVarPath = '/v4/time-filter/postcodes';
                        requestContext = config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(RequestTimeFilterPostcodes, "RequestTimeFilterPostcodes", ""), contentType);
                        requestContext.setBody(serializedBody);
                        authMethod = null;
                        authMethod = config.authMethods["ApiKey"];
                        if (!authMethod) return [3, 2];
                        return [4, authMethod.applySecurityAuthentication(requestContext)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        authMethod = config.authMethods["ApplicationId"];
                        if (!authMethod) return [3, 4];
                        return [4, authMethod.applySecurityAuthentication(requestContext)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [2, requestContext];
                }
            });
        });
    };
    DefaultApiRequestFactory.prototype.timeMap = function (RequestTimeMap, options) {
        return __awaiter(this, void 0, void 0, function () {
            var config, localVarPath, requestContext, contentType, serializedBody, authMethod;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        config = options || this.configuration;
                        if (RequestTimeMap === null || RequestTimeMap === undefined) {
                            throw new baseapi_1.RequiredError('Required parameter RequestTimeMap was null or undefined when calling timeMap.');
                        }
                        localVarPath = '/v4/time-map';
                        requestContext = config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
                        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                        contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                            "application/json"
                        ]);
                        requestContext.setHeaderParam("Content-Type", contentType);
                        serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(RequestTimeMap, "RequestTimeMap", ""), contentType);
                        requestContext.setBody(serializedBody);
                        authMethod = null;
                        authMethod = config.authMethods["ApiKey"];
                        if (!authMethod) return [3, 2];
                        return [4, authMethod.applySecurityAuthentication(requestContext)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        authMethod = config.authMethods["ApplicationId"];
                        if (!authMethod) return [3, 4];
                        return [4, authMethod.applySecurityAuthentication(requestContext)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [2, requestContext];
                }
            });
        });
    };
    return DefaultApiRequestFactory;
}(baseapi_1.BaseAPIRequestFactory));
exports.DefaultApiRequestFactory = DefaultApiRequestFactory;
var DefaultApiResponseProcessor = (function () {
    function DefaultApiResponseProcessor() {
    }
    DefaultApiResponseProcessor.prototype.geocodingReverseSearch = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body_1, _a, _b, _c, _d, body_2, _e, _f, _g, _h, body_3, _j, _k, _l, _m, body;
            return __generator(this, function (_o) {
                switch (_o.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!util_1.isCodeInRange("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body_1 = _b.apply(_a, [_d.apply(_c, [_o.sent(), contentType]),
                            "ResponseGeocoding", ""]);
                        return [2, body_1];
                    case 2:
                        if (!util_1.isCodeInRange("0", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body_2 = _f.apply(_e, [_h.apply(_g, [_o.sent(), contentType]),
                            "ResponseError", ""]);
                        throw new exception_1.ApiException(0, body_2);
                    case 4:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body_3 = _k.apply(_j, [_m.apply(_l, [_o.sent(), contentType]),
                            "ResponseGeocoding", ""]);
                        return [2, body_3];
                    case 6:
                        body = response.body || "";
                        throw new exception_1.ApiException(response.httpStatusCode, "Unknown API Status Code!\nBody: \"" + body + "\"");
                }
            });
        });
    };
    DefaultApiResponseProcessor.prototype.geocodingSearch = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body_4, _a, _b, _c, _d, body_5, _e, _f, _g, _h, body_6, _j, _k, _l, _m, body;
            return __generator(this, function (_o) {
                switch (_o.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!util_1.isCodeInRange("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body_4 = _b.apply(_a, [_d.apply(_c, [_o.sent(), contentType]),
                            "ResponseGeocoding", ""]);
                        return [2, body_4];
                    case 2:
                        if (!util_1.isCodeInRange("0", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body_5 = _f.apply(_e, [_h.apply(_g, [_o.sent(), contentType]),
                            "ResponseError", ""]);
                        throw new exception_1.ApiException(0, body_5);
                    case 4:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body_6 = _k.apply(_j, [_m.apply(_l, [_o.sent(), contentType]),
                            "ResponseGeocoding", ""]);
                        return [2, body_6];
                    case 6:
                        body = response.body || "";
                        throw new exception_1.ApiException(response.httpStatusCode, "Unknown API Status Code!\nBody: \"" + body + "\"");
                }
            });
        });
    };
    DefaultApiResponseProcessor.prototype.mapInfo = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body_7, _a, _b, _c, _d, body_8, _e, _f, _g, _h, body_9, _j, _k, _l, _m, body;
            return __generator(this, function (_o) {
                switch (_o.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!util_1.isCodeInRange("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body_7 = _b.apply(_a, [_d.apply(_c, [_o.sent(), contentType]),
                            "ResponseMapInfo", ""]);
                        return [2, body_7];
                    case 2:
                        if (!util_1.isCodeInRange("0", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body_8 = _f.apply(_e, [_h.apply(_g, [_o.sent(), contentType]),
                            "ResponseError", ""]);
                        throw new exception_1.ApiException(0, body_8);
                    case 4:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body_9 = _k.apply(_j, [_m.apply(_l, [_o.sent(), contentType]),
                            "ResponseMapInfo", ""]);
                        return [2, body_9];
                    case 6:
                        body = response.body || "";
                        throw new exception_1.ApiException(response.httpStatusCode, "Unknown API Status Code!\nBody: \"" + body + "\"");
                }
            });
        });
    };
    DefaultApiResponseProcessor.prototype.routes = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body_10, _a, _b, _c, _d, body_11, _e, _f, _g, _h, body_12, _j, _k, _l, _m, body;
            return __generator(this, function (_o) {
                switch (_o.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!util_1.isCodeInRange("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body_10 = _b.apply(_a, [_d.apply(_c, [_o.sent(), contentType]),
                            "ResponseRoutes", ""]);
                        return [2, body_10];
                    case 2:
                        if (!util_1.isCodeInRange("0", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body_11 = _f.apply(_e, [_h.apply(_g, [_o.sent(), contentType]),
                            "ResponseError", ""]);
                        throw new exception_1.ApiException(0, body_11);
                    case 4:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body_12 = _k.apply(_j, [_m.apply(_l, [_o.sent(), contentType]),
                            "ResponseRoutes", ""]);
                        return [2, body_12];
                    case 6:
                        body = response.body || "";
                        throw new exception_1.ApiException(response.httpStatusCode, "Unknown API Status Code!\nBody: \"" + body + "\"");
                }
            });
        });
    };
    DefaultApiResponseProcessor.prototype.supportedLocations = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body_13, _a, _b, _c, _d, body_14, _e, _f, _g, _h, body_15, _j, _k, _l, _m, body;
            return __generator(this, function (_o) {
                switch (_o.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!util_1.isCodeInRange("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body_13 = _b.apply(_a, [_d.apply(_c, [_o.sent(), contentType]),
                            "ResponseSupportedLocations", ""]);
                        return [2, body_13];
                    case 2:
                        if (!util_1.isCodeInRange("0", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body_14 = _f.apply(_e, [_h.apply(_g, [_o.sent(), contentType]),
                            "ResponseError", ""]);
                        throw new exception_1.ApiException(0, body_14);
                    case 4:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body_15 = _k.apply(_j, [_m.apply(_l, [_o.sent(), contentType]),
                            "ResponseSupportedLocations", ""]);
                        return [2, body_15];
                    case 6:
                        body = response.body || "";
                        throw new exception_1.ApiException(response.httpStatusCode, "Unknown API Status Code!\nBody: \"" + body + "\"");
                }
            });
        });
    };
    DefaultApiResponseProcessor.prototype.timeFilter = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body_16, _a, _b, _c, _d, body_17, _e, _f, _g, _h, body_18, _j, _k, _l, _m, body;
            return __generator(this, function (_o) {
                switch (_o.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!util_1.isCodeInRange("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body_16 = _b.apply(_a, [_d.apply(_c, [_o.sent(), contentType]),
                            "ResponseTimeFilter", ""]);
                        return [2, body_16];
                    case 2:
                        if (!util_1.isCodeInRange("0", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body_17 = _f.apply(_e, [_h.apply(_g, [_o.sent(), contentType]),
                            "ResponseError", ""]);
                        throw new exception_1.ApiException(0, body_17);
                    case 4:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body_18 = _k.apply(_j, [_m.apply(_l, [_o.sent(), contentType]),
                            "ResponseTimeFilter", ""]);
                        return [2, body_18];
                    case 6:
                        body = response.body || "";
                        throw new exception_1.ApiException(response.httpStatusCode, "Unknown API Status Code!\nBody: \"" + body + "\"");
                }
            });
        });
    };
    DefaultApiResponseProcessor.prototype.timeFilterFast = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body_19, _a, _b, _c, _d, body_20, _e, _f, _g, _h, body_21, _j, _k, _l, _m, body;
            return __generator(this, function (_o) {
                switch (_o.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!util_1.isCodeInRange("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body_19 = _b.apply(_a, [_d.apply(_c, [_o.sent(), contentType]),
                            "ResponseTimeFilterFast", ""]);
                        return [2, body_19];
                    case 2:
                        if (!util_1.isCodeInRange("0", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body_20 = _f.apply(_e, [_h.apply(_g, [_o.sent(), contentType]),
                            "ResponseError", ""]);
                        throw new exception_1.ApiException(0, body_20);
                    case 4:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body_21 = _k.apply(_j, [_m.apply(_l, [_o.sent(), contentType]),
                            "ResponseTimeFilterFast", ""]);
                        return [2, body_21];
                    case 6:
                        body = response.body || "";
                        throw new exception_1.ApiException(response.httpStatusCode, "Unknown API Status Code!\nBody: \"" + body + "\"");
                }
            });
        });
    };
    DefaultApiResponseProcessor.prototype.timeFilterPostcodeDistricts = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body_22, _a, _b, _c, _d, body_23, _e, _f, _g, _h, body_24, _j, _k, _l, _m, body;
            return __generator(this, function (_o) {
                switch (_o.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!util_1.isCodeInRange("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body_22 = _b.apply(_a, [_d.apply(_c, [_o.sent(), contentType]),
                            "ResponseTimeFilterPostcodeDistricts", ""]);
                        return [2, body_22];
                    case 2:
                        if (!util_1.isCodeInRange("0", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body_23 = _f.apply(_e, [_h.apply(_g, [_o.sent(), contentType]),
                            "ResponseError", ""]);
                        throw new exception_1.ApiException(0, body_23);
                    case 4:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body_24 = _k.apply(_j, [_m.apply(_l, [_o.sent(), contentType]),
                            "ResponseTimeFilterPostcodeDistricts", ""]);
                        return [2, body_24];
                    case 6:
                        body = response.body || "";
                        throw new exception_1.ApiException(response.httpStatusCode, "Unknown API Status Code!\nBody: \"" + body + "\"");
                }
            });
        });
    };
    DefaultApiResponseProcessor.prototype.timeFilterPostcodeSectors = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body_25, _a, _b, _c, _d, body_26, _e, _f, _g, _h, body_27, _j, _k, _l, _m, body;
            return __generator(this, function (_o) {
                switch (_o.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!util_1.isCodeInRange("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body_25 = _b.apply(_a, [_d.apply(_c, [_o.sent(), contentType]),
                            "ResponseTimeFilterPostcodeSectors", ""]);
                        return [2, body_25];
                    case 2:
                        if (!util_1.isCodeInRange("0", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body_26 = _f.apply(_e, [_h.apply(_g, [_o.sent(), contentType]),
                            "ResponseError", ""]);
                        throw new exception_1.ApiException(0, body_26);
                    case 4:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body_27 = _k.apply(_j, [_m.apply(_l, [_o.sent(), contentType]),
                            "ResponseTimeFilterPostcodeSectors", ""]);
                        return [2, body_27];
                    case 6:
                        body = response.body || "";
                        throw new exception_1.ApiException(response.httpStatusCode, "Unknown API Status Code!\nBody: \"" + body + "\"");
                }
            });
        });
    };
    DefaultApiResponseProcessor.prototype.timeFilterPostcodes = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body_28, _a, _b, _c, _d, body_29, _e, _f, _g, _h, body_30, _j, _k, _l, _m, body;
            return __generator(this, function (_o) {
                switch (_o.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!util_1.isCodeInRange("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body_28 = _b.apply(_a, [_d.apply(_c, [_o.sent(), contentType]),
                            "ResponseTimeFilterPostcodes", ""]);
                        return [2, body_28];
                    case 2:
                        if (!util_1.isCodeInRange("0", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body_29 = _f.apply(_e, [_h.apply(_g, [_o.sent(), contentType]),
                            "ResponseError", ""]);
                        throw new exception_1.ApiException(0, body_29);
                    case 4:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body_30 = _k.apply(_j, [_m.apply(_l, [_o.sent(), contentType]),
                            "ResponseTimeFilterPostcodes", ""]);
                        return [2, body_30];
                    case 6:
                        body = response.body || "";
                        throw new exception_1.ApiException(response.httpStatusCode, "Unknown API Status Code!\nBody: \"" + body + "\"");
                }
            });
        });
    };
    DefaultApiResponseProcessor.prototype.timeMap = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var contentType, body_31, _a, _b, _c, _d, body_32, _e, _f, _g, _h, body_33, _j, _k, _l, _m, body;
            return __generator(this, function (_o) {
                switch (_o.label) {
                    case 0:
                        contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                        if (!util_1.isCodeInRange("200", response.httpStatusCode)) return [3, 2];
                        _b = (_a = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _d = (_c = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 1:
                        body_31 = _b.apply(_a, [_d.apply(_c, [_o.sent(), contentType]),
                            "ResponseTimeMap", ""]);
                        return [2, body_31];
                    case 2:
                        if (!util_1.isCodeInRange("0", response.httpStatusCode)) return [3, 4];
                        _f = (_e = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _h = (_g = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 3:
                        body_32 = _f.apply(_e, [_h.apply(_g, [_o.sent(), contentType]),
                            "ResponseError", ""]);
                        throw new exception_1.ApiException(0, body_32);
                    case 4:
                        if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [3, 6];
                        _k = (_j = ObjectSerializer_1.ObjectSerializer).deserialize;
                        _m = (_l = ObjectSerializer_1.ObjectSerializer).parse;
                        return [4, response.body.text()];
                    case 5:
                        body_33 = _k.apply(_j, [_m.apply(_l, [_o.sent(), contentType]),
                            "ResponseTimeMap", ""]);
                        return [2, body_33];
                    case 6:
                        body = response.body || "";
                        throw new exception_1.ApiException(response.httpStatusCode, "Unknown API Status Code!\nBody: \"" + body + "\"");
                }
            });
        });
    };
    return DefaultApiResponseProcessor;
}());
exports.DefaultApiResponseProcessor = DefaultApiResponseProcessor;
//# sourceMappingURL=DefaultApi.js.map